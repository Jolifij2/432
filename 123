#include <iostream>

using namespace std;

// ------------------------------------------------------------------
// Задание 1: Функции для работы с динамическим массивом
// ------------------------------------------------------------------

// Функция распределения динамической памяти
int* allocateArray(int size) {
    if (size <= 0) {
        return nullptr; // Возвращаем nullptr для некорректного размера
    }
    return new int[size];
}

// Функция инициализации динамического массива
void initArray(int* arr, int size, int value = 0) {
    for (int i = 0; i < size; ++i) {
        *(arr + i) = value;
    }
}

// Функция печати динамического массива
void printArray(int* arr, int size) {
    for (int i = 0; i < size; ++i) {
        cout << *(arr + i) << " ";
    }
    cout << endl;
}

// Функция удаления динамического массива
void deleteArray(int* arr) {
    delete[] arr;
}

// Функция добавления элемента в конец массива
int* appendElement(int* arr, int& size, int element) {
    int* newArr = allocateArray(size + 1);
    if (newArr == nullptr)
        return nullptr; // Не удалось выделить память

    copyArray(arr, newArr, size);

    *(newArr + size) = element;
    size++;
    deleteArray(arr);

    return newArr;
}

//Функция копирования массива
void copyArray(int* source, int* destination, int size) {
    for (int i = 0; i < size; ++i) {
        *(destination + i) = *(source + i);
    }
}


// Функция вставки элемента по указанному индексу
int* insertElement(int* arr, int& size, int element, int index) {
    if (index < 0 || index > size) {
        return arr; // Возвращаем старый массив для некорректного индекса
    }

    int* newArr = allocateArray(size + 1);
    if (newArr == nullptr)
        return nullptr; // Не удалось выделить память

    copyArray(arr, newArr, index);
    *(newArr + index) = element;
    copyArray(arr + index, newArr + index + 1, size - index);
    size++;
    deleteArray(arr);
    return newArr;
}

// Функция удаления элемента по указанному индексу
int* removeElement(int* arr, int& size, int index) {
    if (index < 0 || index >= size) {
        return arr; // Возвращаем старый массив для некорректного индекса
    }

    int* newArr = allocateArray(size - 1);
    if (newArr == nullptr)
        return nullptr; // Не удалось выделить память

    copyArray(arr, newArr, index);
    copyArray(arr + index + 1, newArr + index, size - index - 1);
    size--;
    deleteArray(arr);
    return newArr;
}

// ------------------------------------------------------------------
// Задание 2: Функция удаления простых чисел из массива
// ------------------------------------------------------------------

// Функция для проверки, является ли число простым
bool isPrime(int num) {
    if (num <= 1) {
        return false;
    }
    for (int i = 2; i * i <= num; ++i) {
        if (num % i == 0) {
            return false;
        }
    }
    return true;
}

int* removePrimes(int* arr, int& size) {
    int* tempArr = allocateArray(size);
    int tempSize = 0;

    for (int i = 0; i < size; ++i) {
        if (!isPrime(*(arr + i))) {
            *(tempArr + tempSize) = *(arr + i);
            tempSize++;
        }
    }

    if (tempSize == size) {
        deleteArray(tempArr);
        return arr;
    }

    int* newArr = allocateArray(tempSize);
    if (newArr == nullptr) {
        deleteArray(tempArr);
        return nullptr; // Не удалось выделить память
    }
    copyArray(tempArr, newArr, tempSize);
    size = tempSize;

    deleteArray(arr);
    deleteArray(tempArr);
    return newArr;
}

// ------------------------------------------------------------------
// Задание 3: Функция распределения элементов по массивам
// ------------------------------------------------------------------
void splitArray(int* arr, int size, int*& positives, int& posSize, int*& negatives, int& negSize, int*& zeros, int& zeroSize) {
    posSize = 0;
    negSize = 0;
    zeroSize = 0;

    for (int i = 0; i < size; ++i) {
        if (*(arr + i) > 0) {
            posSize++;
        }
        else if (*(arr + i) < 0) {
            negSize++;
        }
        else {
            zeroSize++;
        }
    }

    positives = allocateArray(posSize);
    negatives = allocateArray(negSize);
    zeros = allocateArray(zeroSize);

    posSize = 0;
    negSize = 0;
    zeroSize = 0;

    for (int i = 0; i < size; ++i) {
        if (*(arr + i) > 0) {
            *(positives + posSize) = *(arr + i);
            posSize++;
        }
        else if (*(arr + i) < 0) {
            *(negatives + negSize) = *(arr + i);
            negSize++;
        }
        else {
            *(zeros + zeroSize) = *(arr + i);
            zeroSize++;
        }
    }
}

int main() {
    // Пример использования Задания 1
    int size = 5;
    int* dynamicArray = allocateArray(size);
    initArray(dynamicArray, size, 1);
    cout << "Задание 1:\nДинамический массив: ";
    printArray(dynamicArray, size);

    dynamicArray = appendElement(dynamicArray, size, 6);
    cout << "После добавления элемента в конец: ";
    printArray(dynamicArray, size);

    dynamicArray = insertElement(dynamicArray, size, 10, 2);
    cout << "После вставки элемента по индексу 2: ";
    printArray(dynamicArray, size);

    dynamicArray = removeElement(dynamicArray, size, 3);
    cout << "После удаления элемента по индексу 3: ";
    printArray(dynamicArray, size);
    deleteArray(dynamicArray);

    // Пример использования Задания 2
    int size2 = 10;
    int* array2 = allocateArray(size2);
    int arr_init[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    copyArray(arr_init, array2, size2);
    cout << "\nЗадание 2:\nИсходный массив: ";
    printArray(array2, size2);
    array2 = removePrimes(array2, size2);
    cout << "Массив без простых чисел: ";
    if (array2)
        printArray(array2, size2);
    deleteArray(array2);


    // Пример использования Задания 3
    int staticArray[] = { 1, -2, 0, 3, -4, 5, 0, -6 };
    int staticSize = sizeof(staticArray) / sizeof(staticArray[0]);
    int* positives = nullptr, * negatives = nullptr, * zeros = nullptr;
    int posSize = 0, negSize = 0, zeroSize = 0;

    splitArray(staticArray, staticSize, positives, posSize, negatives, negSize, zeros, zeroSize);
    cout << "\nЗадание 3:\nИсходный статический массив: ";
    printArray(staticArray, staticSize);
    cout << "Положительные элементы: ";
    printArray(positives, posSize);
    cout << "Отрицательные элементы: ";
    printArray(negatives, negSize);
    cout << "Нулевые элементы: ";
    printArray(zeros, zeroSize);

    deleteArray(positives);
    deleteArray(negatives);
    deleteArray(zeros);

    return 0;
}
